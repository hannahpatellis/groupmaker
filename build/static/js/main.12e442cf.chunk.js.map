{"version":3,"sources":["components/Group.js","components/Timer.js","components/GroupField.js","components/StudentPicker.js","App.js","registerServiceWorker.js","index.js"],"names":["Group","props","className","Card","Content","header","groupName","description","group","map","name","i","key","Timer","timerInput","placeholder","onChange","inputChangeTimerTime","value","initialInput","id","type","onClick","handleTimerCountClick","style","fontSize","minutes","seconds","Button","size","fluid","color","buttonColor","handleTimerButton","timerButton","GroupField","Input","icon","Icon","inverted","circular","link","handleMakeGroupsButton","handleNumberChange","numInGroups","modalShow","StudentPicker","Modal","basic","open","modalOpen","onClose","modalClose","Header","scrolling","studentsMaster","student","Checkbox","label","handleCheckboxToggle","checked","present","Actions","roster","require","App","state","groupNames","presentStudents","process","initialMin","initialSec","tick","min","Math","floor","secondsRemaining","sec","setState","clearInterval","intervalHandle","handleStartTimer","handleStopTimer","setInterval","time","handleTimerInputChange","e","target","inputTime","shuffle","array","temporaryValue","randomIndex","currentIndex","length","random","newVal","randomArr","randomGroupNames","parseInt","processArr","count","totalRemaining","tempArr","remainderArr","push","includes","forEach","element","splice","syncAvailableStudents","studentsMasterUpdated","presentStudentsUpdated","studentsMasterProcess","processObj","this","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","ReactDom","render","document","getElementById","URL","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.12e442cf.chunk.js","sourcesContent":["import React from 'react';\nimport { Card } from 'semantic-ui-react';\n\nconst Group = props => (\n  <div className='group-holder'>\n    <Card>\n      <Card.Content header={props.groupName} />\n      <Card.Content description={props.group.map((name, i) => <p key={i}>{name}</p>)} />\n    </Card>\n  </div>\n);\n\nexport default Group;","import React from 'react';\nimport { Button } from 'semantic-ui-react';\n\nconst Timer = props => (\n  <div className='timer-holder'>\n    {props.timerInput ? (\n      <input placeholder=\"0m\" onChange={props.inputChangeTimerTime} value={props.initialInput} id=\"incoming-time\" type=\"text\" />\n    ) : (\n      <h1 onClick={props.handleTimerCountClick} style={{ fontSize: 100 }}>{props.minutes}:{props.seconds}</h1>\n    )}\n\n    <Button size='mini' fluid color={props.buttonColor} onClick={props.handleTimerButton}>\n      {props.timerButton}\n    </Button>\n  </div>\n);\n\nexport default Timer;","import React from 'react';\nimport { Input, Icon, Button } from 'semantic-ui-react';\n\nconst GroupField = props => (\n  <div className='sortbuddy-holder'>\n    <Input \n      size='mini'\n      icon={<Icon name='refresh' inverted circular link onClick={props.handleMakeGroupsButton} />}\n      onChange={props.handleNumberChange}\n      value={props.numInGroups} />\n    <Button size='mini' onClick={props.modalShow}><Icon name='user times' /></Button>\n  </div>\n);\n\nexport default GroupField;","import React from 'react';\nimport { Modal, Checkbox, Button, Icon } from 'semantic-ui-react';\n\nconst StudentPicker = props => (\n  <Modal size='mini' basic open={props.modalOpen} onClose={props.modalClose}>\n    <Modal.Header>Select which students to include</Modal.Header>\n    <Modal.Content scrolling>\n      {props.studentsMaster.map((student, i) => (\n        <div key={i} className='student'>\n          <Checkbox\n            label={student.name}\n            onChange={() => props.handleCheckboxToggle(i)}\n            checked={student.present}\n          />\n        </div>\n      ))}\n    </Modal.Content>\n    <Modal.Actions>\n      <Button color='green' onClick={props.modalClose} inverted>\n        <Icon name='save outline' /> Save\n      </Button>\n    </Modal.Actions>\n  </Modal>\n);\n\nexport default StudentPicker;","import React, { Component } from 'react';\n\nimport Group from './components/Group';\nimport Timer from './components/Timer';\nimport GroupField from './components/GroupField';\nimport StudentPicker from './components/StudentPicker';\n\nconst roster = require('./students.json');\n\nclass App extends Component {\n  state = {\n    numInGroups: 2,\n    groupNames: [\n      '🧠🦁',\n      '🕶🐸',\n      '☄️🐈',\n      '⛸🌝',\n      '🚀🦕',\n      '🦞🐝',\n      '🌹🍄',\n      '🍊🎉',\n      '🌅💎',\n      '🏕🐲',\n      '🍌🐛',\n      '🥨📟',\n      '🌵🦈',\n      '🌮🥯'\n    ],\n    studentsMaster: [],\n    presentStudents: [],\n    process: [],\n    minutes: '0',\n    seconds: '00',\n    initialMin: '10',\n    initialSec: '00',\n    initialInput: '',\n    timerButton: 'Start timer',\n    buttonColor: 'green',\n    timerInput: false,\n    modalOpen: false\n  }\n\n  // Timer\n  secondsRemaining;\n  intervalHandle;\n\n  tick = () => {\n    var min = Math.floor(this.secondsRemaining / 60);\n    var sec = this.secondsRemaining - (min * 60);\n    this.setState({\n      minutes: min,\n      seconds: sec\n    })\n    if (sec < 10) {\n      this.setState({\n        seconds: '0' + this.state.seconds,\n      })\n    }\n    if (min < 10) {\n      this.setState({\n        value: '0' + min,\n      })\n    }\n    if (min === 0 & sec === 0) {\n      clearInterval(this.intervalHandle);\n    }\n    this.secondsRemaining--;\n  }\n\n  handleTimerButton = () => {\n    if(this.state.timerButton === 'Start timer') {\n      this.handleStartTimer();\n      this.setState({ timerButton: 'Stop and reset timer', buttonColor: 'red', timerInput: false });\n    } else {\n      this.handleStopTimer();\n      this.setState({ timerButton: 'Start timer', buttonColor: 'green' });\n    }\n  }\n\n  handleStartTimer = () => {\n    this.intervalHandle = setInterval(this.tick, 1000);\n    let time = this.state.initialInput;\n    this.secondsRemaining = time * 60;\n    this.setState({ initialMin: time })\n  }\n\n  handleStopTimer = () => {\n    clearInterval(this.intervalHandle);\n    this.setState({ minutes: this.state.initialMin, seconds: this.state.initialSec })\n  }\n\n  handleTimerInputChange = e => {\n    this.setState({ minutes: e.target.value });\n  }\n\n  handleTimerCountClick = () => {\n    this.setState({ timerInput: true });\n  }\n\n  inputChangeTimerTime = e => {\n    let inputTime = e.target.value;\n    this.setState({ initialInput: inputTime });\n  }\n\n  // Student array shuffle\n  shuffle = array => {\n    let currentIndex = array.length, temporaryValue, randomIndex;\n\n    while (0 !== currentIndex) {\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex -= 1;\n\n      temporaryValue = array[currentIndex];\n      array[currentIndex] = array[randomIndex];\n      array[randomIndex] = temporaryValue;\n    }\n\n    return array;\n  }\n\n  // Group generation\n  handleNumberChange = e => {\n    const newVal = e.target.value;\n    this.setState({ numInGroups: newVal });\n  };\n\n  handleMakeGroupsButton = () => {\n    const randomArr = this.shuffle(this.state.presentStudents);\n    const randomGroupNames = this.shuffle(this.state.groupNames);\n\n    const numInGroups = parseInt(this.state.numInGroups);\n      \n    let processArr = [];\n    let count = 0;\n    let totalRemaining = randomArr.length;\n    let tempArr = [];\n    let remainderArr = [];\n\n    for (let i = 0; i < randomArr.length; i++) {\n      /* If the current count is less than the size of each group\n         push that name into the tempArr array, increase the count,\n         decrease the totalRemaining */ \n      // -Works-\n      if(count < numInGroups) {\n        tempArr.push(randomArr[i]);\n        count++;\n        totalRemaining--;\n      }\n      /* If the count is equal to the size of each grop\n         push the tempArr array into the processArr array\n         because the tempArr array is full. Then push the name\n         into the tempArr after clearing it and reset the count \n         to 1 because 1 name is in the tempArr array. Decrease\n         the totalRemaining */ \n      // -Works-\n      else if (count === numInGroups) { \n        processArr.push(tempArr);\n        tempArr = [];\n        tempArr.push(randomArr[i]);\n        count = 1;\n        totalRemaining--;\n      }\n\n      // If the total remaining to be sorted is less than the number in groups minus count, and the name isn't already in the process array\n      // push the remaining name into the remainderArr array\n      // -Works-\n      if (totalRemaining < numInGroups-count && !processArr.includes(randomArr[i])) {\n        remainderArr.push(randomArr[i]);\n      }\n    }\n\n    /* If the processArr array doesn't include\n       the last tempArr array (because the last \n       even array will not trigger the else if\n       (count === numInGroups)) then push\n       the last tempArr into the processArr */\n    // Hack fix\n    if(!processArr.includes(tempArr[0])) {\n      processArr.push(tempArr);\n    }\n\n    /* If there are elements in the remainder array\n       cycle through the remainders and add one to each\n       of the existing process arrays.\n\n       Then remove the last array in the process array\n       since it is incomplete and holds the remainders */\n    // There has to be a better way to do this\n    // This does dumb stuff like make groups of five instead of one group of 3 when there are supposed to be groups of four. This needs fixing.\n    if(remainderArr.length >= 1) {\n      remainderArr.forEach((element, i) => {\n        processArr[i].push(remainderArr[i]);\n      });\n      processArr.splice(processArr.length-1, 1);\n    }\n\n    this.setState({ process: processArr, groupNames: randomGroupNames });\n  };\n\n  // Student picker modal\n  modalShow = () => this.setState({ modalOpen: true });\n  modalClose = () => this.setState({ modalOpen: false });\n  \n  syncAvailableStudents = studentsMasterUpdated => {\n    let presentStudentsUpdated = [];\n    studentsMasterUpdated.forEach(student => {\n      if(student.present) {\n        presentStudentsUpdated.push(student.name);\n      }\n    });\n    this.setState({ presentStudents: presentStudentsUpdated, studentsMaster: studentsMasterUpdated });\n  }\n\n  handleCheckboxToggle = i => {\n    let studentsMasterUpdated = this.state.studentsMaster;\n    studentsMasterUpdated[i].present = !studentsMasterUpdated[i].present;\n    this.syncAvailableStudents(studentsMasterUpdated);\n  }\n\n  componentDidMount() {\n    let studentsMasterProcess = [];\n    roster.forEach(element => {\n      let processObj = {\n        name: element,\n        present: true\n      };\n      studentsMasterProcess.push(processObj);\n    });\n    this.syncAvailableStudents(studentsMasterProcess);\n  }\n\n  render() {\n    return (\n      <div className='app'>\n        <StudentPicker \n          modalShow={this.modalShow}\n          modalClose={this.modalClose}\n          modalOpen={this.state.modalOpen}\n          handleCheckboxToggle={this.handleCheckboxToggle}\n          studentsMaster={this.state.studentsMaster} />\n\n        <div className='topWrap'>\n          <Timer\n              minutes={this.state.minutes}\n              seconds={this.state.seconds}\n              handleTimerInputChange={this.handleTimerInputChange}\n              handleTimerButton={this.handleTimerButton} \n              timerButton={this.state.timerButton} \n              buttonColor={this.state.buttonColor} \n              timerInput={this.state.timerInput} \n              handleTimerCountClick={this.handleTimerCountClick} \n              inputChangeTimerTime={this.inputChangeTimerTime}\n              initialInput={this.state.initialInput} />\n          <div className='myhr'></div>\n          <GroupField \n            handleMakeGroupsButton={this.handleMakeGroupsButton}\n            numInGroups={this.state.numInGroups}\n            handleNumberChange={this.handleNumberChange}\n            modalShow={this.modalShow} />\n        </div>\n        \n        <div className='groupsWrap'>\n          {this.state.process.map((group, i) => (\n            <Group group={group} key={i} groupName={this.state.groupNames[i]} />\n          ))}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (!isLocalhost) {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      } else {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log(\"New content is available; please refresh.\");\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get(\"content-type\").indexOf(\"javascript\") === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDom from 'react-dom';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\nimport 'semantic-ui-css/semantic.min.css';\n\nReactDom.render(<App />, document.getElementById('react-app'));\n\nregisterServiceWorker();"],"sourceRoot":""}